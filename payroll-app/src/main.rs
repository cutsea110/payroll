use log::{debug, info, trace};

use hs_db::HashDB;
use payroll_app::app_config;

fn print_header(_app_conf: &app_config::AppConfig) {
    trace!("print_header called");
    // this banner generated by using `figlet -f slant 'payro$$'`
    let lines = vec![
        r#"                                   __  __"#,
        r#"    ____  ____ ___  ___________  _/ /_/ /"#,
        r#"   / __ \/ __ `/ / / / ___/ __ \/ __/ __/"#,
        r#"  / /_/ / /_/ / /_/ / /  / /_/ (_  |_  ) "#,
        r#" / .___/\__,_/\__, /_/   \____/  _/  _/  "#,
        r#"/_/          /____/           /_/ /_/    "#,
        r#"When you quit, you press Ctrl-D."#,
    ];
    eprintln!("{}", lines.join("\n"));
}

fn main() -> Result<(), anyhow::Error> {
    env_logger::Builder::from_default_env()
        .format_source_path(true)
        .format_line_number(true)
        .init();

    info!("main starting");

    let app_conf = app_config::AppConfig::new()?;
    debug!("main: app_conf={:#?}", app_conf);
    if app_conf.should_show_help() {
        debug!("main: should show help");
        println!("{}", app_conf.help_message());
        return Ok(());
    }
    if !app_conf.should_run_quietly() {
        debug!("main: shouldn't run quietly");
        print_header(&app_conf);
    }

    let db = HashDB::new();

    trace!("main: TxApp building");
    let mut tx_app = app_conf.build_tx_app(db.clone());
    trace!("main: TxApp running");
    tx_app.run()?;
    trace!("main: TxApp finished");

    if !app_conf.should_run_quietly() {
        debug!("main: shouldn't run quietly");
        // this is just for developer
        println!("{:#?}", db);
    }

    info!("main finished");
    Ok(())
}
